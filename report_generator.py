# report_generator.py
from fpdf import FPDF
from datetime import datetime
import json

class PDFReport(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, 'Rural Health Assistant - Medical Report', 0, 1, 'C')
        self.set_font('Arial', '', 12)
        self.cell(0, 10, f'Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M")}', 0, 1, 'C')
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')

def generate_pdf_report(user_data, session_data):
    pdf = PDFReport()
    pdf.add_page()
    
    # User Information
    pdf.set_font('Arial', 'B', 14)
    pdf.cell(0, 10, 'Patient Information', 0, 1)
    pdf.set_font('Arial', '', 12)
    pdf.cell(0, 10, f'Name: {user_data.get("name", "N/A")}', 0, 1)
    pdf.cell(0, 10, f'Age: {user_data.get("age", "N/A")}', 0, 1)
    pdf.cell(0, 10, f'Email: {user_data.get("email", "N/A")}', 0, 1)
    pdf.cell(0, 10, f'Location: {user_data.get("city", "")} {user_data.get("pincode", "")}', 0, 1)
    pdf.ln(10)
    
    # Assessment Results
    pdf.set_font('Arial', 'B', 14)
    pdf.cell(0, 10, 'Assessment Results', 0, 1)
    pdf.set_font('Arial', '', 12)
    
    triage_result = session_data.get('session_data', {}).get('triage_result', {})
    risk_level = triage_result.get('risk_level', 'Unknown')
    risk_proba = triage_result.get('risk_proba', 0)
    reason = triage_result.get('reason', '')
    
    pdf.cell(0, 10, f'Risk Level: {risk_level} ({risk_proba:.0%} probability)', 0, 1)
    pdf.multi_cell(0, 10, f'Reason: {reason}')
    pdf.ln(5)
    
    # Possible Conditions
    conditions = triage_result.get('possible_conditions', [])
    if conditions:
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, 'Possible Conditions:', 0, 1)
        pdf.set_font('Arial', '', 12)
        for condition in conditions:
            disease = condition.get('disease', 'Unknown')
            confidence = condition.get('confidence', 0)
            pdf.cell(0, 10, f'- {disease} ({confidence:.0%} confidence)', 0, 1)
        pdf.ln(5)
    
    # Recommendations
    recommendations = triage_result.get('recommendations', [])
    if recommendations:
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, 'Recommendations:', 0, 1)
        pdf.set_font('Arial', '', 12)
        for rec in recommendations:
            pdf.cell(0, 10, f'- {rec}', 0, 1)
        pdf.ln(5)
    
    # Location Information
    if user_data.get('city') or user_data.get('pincode'):
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, 'Location Information:', 0, 1)
        pdf.set_font('Arial', '', 12)
        if user_data.get('city'):
            pdf.cell(0, 10, f'City: {user_data.get("city")}', 0, 1)
        if user_data.get('pincode'):
            pdf.cell(0, 10, f'Pincode: {user_data.get("pincode")}', 0, 1)
        pdf.ln(5)
    
    # Disclaimer
    pdf.set_font('Arial', 'I', 10)
    pdf.multi_cell(0, 10, 'Disclaimer: This report is generated by an AI assistant and should not be considered a substitute for professional medical advice. Please consult with a qualified healthcare provider for proper diagnosis and treatment.')
    
    return pdf.output(dest='S').encode('latin1')